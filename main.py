import streamlit as st
import requests
import datetime
import pandas as pd
import openai
from newsapi import NewsApiClient

# ========== Configs ==========
openai.api_key = st.secrets["OPENAI_API_KEY"]
newsapi = NewsApiClient(api_key=st.secrets["NEWS_API_KEY"])

PORT_STOCKS = ["AAPL", "TSLA", "NVDA"]  # Example port
WATCHLIST = ["GOOGL", "MSFT"]
ALL_TICKERS = list(set(PORT_STOCKS + WATCHLIST))

# ========== Utility Functions ==========
def get_stock_price_and_indicators(ticker):
    # --- MOCKUP API --- Replace this with actual finance API call
    return {
        "price": round(100 + hash(ticker) % 100, 2),
        "rsi": 30 + hash(ticker + "rsi") % 40,  # 30-70
        "ema": round(95 + hash(ticker + "ema") % 10, 2),
    }

def get_news_for_ticker(ticker):
    today = datetime.datetime.now().strftime("%Y-%m-%d")
    articles = newsapi.get_everything(
        q=ticker,
        from_param=today,
        to=today,
        language="en",
        sort_by="relevancy",
        page=1,
    )
    return articles["articles"][:8]  # return top 8 for filtering later

def analyze_sentiment_and_summarize(article):
    prompt = f"""
    ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏∏‡πâ‡∏ô: "{article['title']}"
    ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏∑‡∏≠:
    {article['description'] or article['content']}

    1. ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡πÄ‡∏õ‡πá‡∏ô Bullet)
    2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏∞‡πÑ‡∏£
    """
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.5,
    )
    return response.choices[0].message.content.strip()

def rsi_recommendation(rsi):
    if rsi < 30:
        return "RSI ‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‚Üí ‡∏≠‡∏≤‡∏à‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏ã‡∏∑‡πâ‡∏≠"
    elif rsi > 70:
        return "RSI ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‚Üí ‡∏≠‡∏≤‡∏à‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏Ç‡∏≤‡∏¢"
    else:
        return "RSI ‡∏õ‡∏Å‡∏ï‡∏¥ ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞"

def ema_recommendation(price, ema):
    if price > ema:
        return "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ EMA ‚Üí ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô"
    elif price < ema:
        return "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ EMA ‚Üí ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏≤‡∏•‡∏á"
    else:
        return "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á EMA ‚Üí ‡∏≠‡∏≤‡∏à‡∏£‡∏≠‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°"

# ========== Streamlit Layout ==========
st.set_page_config(page_title="üìä Stock News Dashboard", layout="wide")
st.title("üìà Dashboard ‡∏Ç‡πà‡∏≤‡∏ß‡∏´‡∏∏‡πâ‡∏ô + ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡πÅ‡∏ö‡∏ö Realtime")

ticker = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏´‡∏£‡∏∑‡∏≠ Watchlist:", ALL_TICKERS)

with st.spinner("üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πà‡∏≤‡∏ß..."):
    stock_data = get_stock_price_and_indicators(ticker)
    raw_news = get_news_for_ticker(ticker)

    summaries = []
    for article in raw_news:
        try:
            summary = analyze_sentiment_and_summarize(article)
            summaries.append({
                "title": article["title"],
                "summary": summary,
                "url": article["url"]
            })
        except Exception as e:
            continue

# ========== Display Section ==========

st.subheader(f"üìâ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${stock_data['price']}")
col1, col2 = st.columns(2)

with col1:
    st.metric("üìå RSI", stock_data['rsi'], help="‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤")
    st.write(rsi_recommendation(stock_data['rsi']))

with col2:
    st.metric("üìå EMA", stock_data['ema'], help="‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡πÄ‡∏≠‡πá‡∏Å‡∏ã‡πå‡πÇ‡∏õ‡πÄ‡∏ô‡∏ô‡πÄ‡∏ä‡∏µ‡∏¢‡∏•")
    st.write(ema_recommendation(stock_data['price'], stock_data['ema']))

# ‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏¢‡∏Å‡∏™‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
st.subheader("üì∞ ‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡πÅ‡∏õ‡∏•‡πÑ‡∏ó‡∏¢ + ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå)")

positive_news = [n for n in summaries if "‡∏ö‡∏ß‡∏Å" in n["summary"]][:2]
negative_news = [n for n in summaries if "‡∏•‡∏ö" in n["summary"]][:2]

st.markdown("#### ‚úÖ ‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ö‡∏ß‡∏Å")
for n in positive_news:
    st.markdown(f"- [{n['title']}]({n['url']})\n\n{n['summary']}")

st.markdown("#### ‚ö†Ô∏è ‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡πâ‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á")
for n in negative_news:
    st.markdown(f"- [{n['title']}]({n['url']})\n\n{n['summary']}")
