import streamlit as st
import requests
import datetime
import pandas as pd
import openai
from newsapi import NewsApiClient
import time
import yfinance as yf

# ========== Configs ==========
openai.api_key = st.secrets["OPENAI_API_KEY"]
newsapi = NewsApiClient(api_key=st.secrets["NEWS_API_KEY"])

PORT_STOCKS = ["ABBV", "PFE", "NVDA", "O", "MSFT", "TSM", "RKLB", "GOOGL", "RXRX"]  # Portfolio
WATCHLIST = ["AMZN", "ARM", "ASML", "JEPQ"]  # Watchlist
ALL_TICKERS = list(set(PORT_STOCKS + WATCHLIST))

# ========== Utility Functions ==========
@st.cache_data(ttl=300)  # Cache 5 ‡∏ô‡∏≤‡∏ó‡∏µ
def get_stock_price_and_indicators(ticker):
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏ú‡πà‡∏≤‡∏ô Yahoo Finance"""
    try:
        stock = yf.Ticker(ticker)
        hist = stock.history(period="30d")  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 30 ‡∏ß‡∏±‡∏ô
        
        if hist.empty:
            raise Exception(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {ticker}")
            
        current_price = hist['Close'].iloc[-1]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì RSI
        closes = hist['Close']
        delta = closes.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs)).iloc[-1]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA 20 ‡∏ß‡∏±‡∏ô
        ema = closes.ewm(span=20).mean().iloc[-1]
        
        return {
            "price": round(current_price, 2),
            "rsi": round(rsi, 2),
            "ema": round(ema, 2),
            "change": round(((current_price - hist['Close'].iloc[-2]) / hist['Close'].iloc[-2]) * 100, 2)
        }
    except Exception as e:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô {ticker}: {str(e)}")
        # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Mock ‡πÄ‡∏õ‡πá‡∏ô fallback
        return {
            "price": round(100 + hash(ticker) % 100, 2),
            "rsi": 30 + hash(ticker + "rsi") % 40,
            "ema": round(95 + hash(ticker + "ema") % 10, 2),
            "change": round(-5 + hash(ticker + "change") % 10, 2)
        }

def get_news_for_ticker(ticker):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏° Rate Limiting Protection ‡πÅ‡∏•‡∏∞ Multiple Sources"""
    
    # ‚úÖ ‡πÉ‡∏ä‡πâ session_state cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥ (Cache ‡∏ô‡∏≤‡∏ô 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
    cache_key = f"news_cache_{ticker}_{datetime.datetime.now().strftime('%Y%m%d_%H')}"
    six_hour_cache_key = f"news_cache_6h_{ticker}_{datetime.datetime.now().strftime('%Y%m%d_%H')}".replace(f'_{datetime.datetime.now().hour}', f'_{datetime.datetime.now().hour // 6 * 6}')
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡πà‡∏≠‡∏ô
    if six_hour_cache_key in st.session_state:
        st.info("üìã ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å Cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î API Quota")
        return st.session_state[six_hour_cache_key]
    
    if cache_key in st.session_state:
        return st.session_state[cache_key]

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Quota
    quota_key = f"api_quota_{datetime.datetime.now().strftime('%Y%m%d')}"
    if quota_key not in st.session_state:
        st.session_state[quota_key] = 0
    
    if st.session_state[quota_key] >= 80:  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà 80 requests/day
        st.warning("‚ö†Ô∏è API Quota ‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Alternative Sources")
        return get_alternative_news(ticker)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Rate Limiting
    last_request_key = "last_news_request"
    if last_request_key in st.session_state:
        time_since_last = time.time() - st.session_state[last_request_key]
        if time_since_last < 15:  # ‡∏£‡∏≠ 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            st.warning(f"‚è≥ ‡∏£‡∏≠ {15-int(time_since_last)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Rate Limit")
            return get_alternative_news(ticker)

    # ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
    try:
        # ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
    try:
        query_map = {
            # Portfolio stocks
            "ABBV": "AbbVie pharmaceutical",
            "PFE": "Pfizer pharmaceutical", 
            "NVDA": "Nvidia",
            "O": "Realty Income REIT",
            "MSFT": "Microsoft",
            "TSM": "Taiwan Semiconductor",
            "RKLB": "Rocket Lab",
            "GOOGL": "Google Alphabet",
            "RXRX": "Recursion Pharmaceuticals",
            # Watchlist stocks
            "AMZN": "Amazon",
            "ARM": "ARM Holdings",
            "ASML": "ASML semiconductor",
            "JEPQ": "JPMorgan ETF"
        }
        query_term = query_map.get(ticker, ticker)

        st.session_state[last_request_key] = time.time()
        st.session_state[quota_key] += 1
        
        # ‡πÉ‡∏ä‡πâ get_top_headlines ‡πÅ‡∏ó‡∏ô get_everything (‡πÉ‡∏ä‡πâ quota ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤)
        articles = newsapi.get_top_headlines(
            q=query_term,
            language="en",
            category="business",
            page_size=6
        )
        
        if articles["status"] == "ok" and articles.get("articles"):
            filtered_articles = [art for art in articles["articles"] if art.get("title") and art.get("description")][:4]
            st.session_state[six_hour_cache_key] = filtered_articles  # Cache ‡∏ô‡∏≤‡∏ô 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
            st.success(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({len(filtered_articles)} ‡∏Ç‡πà‡∏≤‡∏ß) - API Quota ‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {100-st.session_state[quota_key]}")
            return filtered_articles
        else:
            raise Exception("No articles found")
            
    except Exception as e:
        st.error(f"‚ùå News API ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {str(e)}")
        return get_alternative_news(ticker)

def get_alternative_news(ticker):
    """‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ News API ‡∏´‡∏°‡∏î"""
    
    # ‚úÖ ‡πÉ‡∏ä‡πâ RSS Feed ‡∏´‡∏£‡∏∑‡∏≠ Web Scraping ‡πÄ‡∏õ‡πá‡∏ô Alternative
    company_map = {
        # Portfolio
        "ABBV": {"name": "AbbVie", "sector": "Healthcare/Pharma"},
        "PFE": {"name": "Pfizer", "sector": "Healthcare/Pharma"},
        "NVDA": {"name": "Nvidia", "sector": "Technology/AI"},
        "O": {"name": "Realty Income", "sector": "REIT/Real Estate"},
        "MSFT": {"name": "Microsoft", "sector": "Technology"},
        "TSM": {"name": "Taiwan Semiconductor", "sector": "Technology/Semiconductor"},
        "RKLB": {"name": "Rocket Lab", "sector": "Aerospace/Space"},
        "GOOGL": {"name": "Google/Alphabet", "sector": "Technology"},
        "RXRX": {"name": "Recursion Pharmaceuticals", "sector": "Biotech/AI"},
        # Watchlist
        "AMZN": {"name": "Amazon", "sector": "E-commerce/Cloud"},
        "ARM": {"name": "ARM Holdings", "sector": "Semiconductor/IP"},
        "ASML": {"name": "ASML", "sector": "Semiconductor Equipment"},
        "JEPQ": {"name": "JPMorgan Equity Premium Income ETF", "sector": "ETF/Income"}
    }

# ‡πÄ‡∏û‡∏¥‡πà‡∏° company_map ‡∏ó‡∏µ‡πà global level ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ selectbox ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
company_map = {
    # Portfolio
    "ABBV": {"name": "AbbVie", "sector": "Healthcare/Pharma"},
    "PFE": {"name": "Pfizer", "sector": "Healthcare/Pharma"},
    "NVDA": {"name": "Nvidia", "sector": "Technology/AI"},
    "O": {"name": "Realty Income", "sector": "REIT/Real Estate"},
    "MSFT": {"name": "Microsoft", "sector": "Technology"},
    "TSM": {"name": "Taiwan Semiconductor", "sector": "Technology/Semiconductor"},
    "RKLB": {"name": "Rocket Lab", "sector": "Aerospace/Space"},
    "GOOGL": {"name": "Google/Alphabet", "sector": "Technology"},
    "RXRX": {"name": "Recursion Pharmaceuticals", "sector": "Biotech/AI"},
    # Watchlist
    "AMZN": {"name": "Amazon", "sector": "E-commerce/Cloud"},
    "ARM": {"name": "ARM Holdings", "sector": "Semiconductor/IP"},
    "ASML": {"name": "ASML", "sector": "Semiconductor Equipment"},
    "JEPQ": {"name": "JPMorgan Equity Premium Income ETF", "sector": "ETF/Income"}
}
    
    company_info = company_map.get(ticker, {"name": ticker, "sector": "General"})
    
    # ‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏î‡∏µ ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏° sector
    if "Pharma" in company_info["sector"] or "Healthcare" in company_info["sector"]:
        sector_context = "‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå"
        sector_trend = "‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏¢‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å FDA"
    elif "Technology" in company_info["sector"] or "AI" in company_info["sector"]:
        sector_context = "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞ AI"
        sector_trend = "‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏° AI ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏ó‡∏Ñ"
    elif "Semiconductor" in company_info["sector"]:
        sector_context = "‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏ã‡∏°‡∏¥‡∏Ñ‡∏≠‡∏ô‡∏î‡∏±‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå"
        sector_trend = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏¥‡∏õ‡πÅ‡∏•‡∏∞‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤"
    elif "REIT" in company_info["sector"]:
        sector_context = "‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÅ‡∏•‡∏∞ REIT"
        sector_trend = "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÅ‡∏•‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏Ø"
    elif "ETF" in company_info["sector"]:
        sector_context = "‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô ETF"
        sector_trend = "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•"
    else:
        sector_context = "‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°"
        sector_trend = "‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡πÇ‡∏•‡∏Å"
    
    # ‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏î‡∏µ
    alternative_news = [
        {
            "title": f"üìä {company_info['name']} ({ticker}) - ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç",
            "description": f"‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏≠‡∏á {company_info['name']} ‡πÉ‡∏ô‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ô‡∏µ‡πâ ‡πÇ‡∏î‡∏¢‡∏°‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏≤‡∏á‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï",
            "url": f"https://finance.yahoo.com/quote/{ticker}/news",
            "publishedAt": datetime.datetime.now().isoformat(),
            "source": "Yahoo Finance"
        },
        {
            "title": f"üíº {company_info['name']} ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡πÅ‡∏ú‡∏ô‡∏¢‡∏∏‡∏ó‡∏ò‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÉ‡∏´‡∏°‡πà",
            "description": f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å {company_info['name']} ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏´‡∏°‡πà ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß",
            "url": f"https://finance.yahoo.com/quote/{ticker}",
            "publishedAt": (datetime.datetime.now() - datetime.timedelta(hours=2)).isoformat(),
            "source": "Market Analysis"
        },
        {
            "title": f"üìà {ticker} ‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ï‡∏•‡∏≤‡∏î",
            "description": f"‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á {company_info['name']} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î‡πÇ‡∏•‡∏Å",
            "url": f"https://finance.yahoo.com/quote/{ticker}/analysis",
            "publishedAt": (datetime.datetime.now() - datetime.timedelta(hours=4)).isoformat(),
            "source": "Financial Analysis"
        },
        {
            "title": f"üåê ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠ {company_info['name']}",
            "description": f"‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠ {company_info['name']} ‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏• ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°",
            "url": f"https://finance.yahoo.com/quote/{ticker}/profile",
            "publishedAt": (datetime.datetime.now() - datetime.timedelta(hours=6)).isoformat(),
            "source": "Industry Report"
        }
    ]
    
    st.info("üì∞ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å Alternative Sources ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å News API Quota ‡∏´‡∏°‡∏î")
    return alternative_news

@st.cache_data(ttl=3600)  # Cache 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
def analyze_sentiment_and_summarize(article):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß"""
    try:
        prompt = f"""
        ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏´‡∏∏‡πâ‡∏ô‡∏ô‡∏µ‡πâ:
        ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: "{article['title']}"
        ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: {article['description']}

        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:
        
        **‡∏™‡∏£‡∏∏‡∏õ:** [‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô 1-2 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ]
        
        **‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö:** [‡∏ö‡∏ß‡∏Å/‡∏•‡∏ö/‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á] - [‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡∏±‡πâ‡∏ô‡πÜ]
        
        **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** [‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô]
        """
        
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # ‡πÉ‡∏ä‡πâ gpt-3.5-turbo ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏Å‡∏ß‡πà‡∏≤
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
            max_tokens=300
        )
        return response.choices[0].message.content.strip()
        
    except Exception as e:
        # Fallback analysis
        return f"""
        **‡∏™‡∏£‡∏∏‡∏õ:** ‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô
        
        **‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö:** ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        
        **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏•‡∏á‡∏ó‡∏∏‡∏ô
        """

def rsi_recommendation(rsi):
    if rsi < 30:
        return "üü¢ RSI ‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‚Üí ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á"
    elif rsi > 70:
        return "üî¥ RSI ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‚Üí ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≤‡∏¢‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á"
    elif rsi < 40:
        return "üü° RSI ‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πà‡∏≥ ‚Üí ‡∏≠‡∏≤‡∏à‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ã‡∏∑‡πâ‡∏≠"
    elif rsi > 60:
        return "üü° RSI ‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á ‚Üí ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏á"
    else:
        return "‚ö™ RSI ‡∏õ‡∏Å‡∏ï‡∏¥ ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞"

def ema_recommendation(price, ema):
    diff_percent = ((price - ema) / ema * 100)
    if diff_percent > 2:
        return f"üü¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ EMA {diff_percent:.1f}% ‚Üí ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á"
    elif diff_percent < -2:
        return f"üî¥ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ EMA {abs(diff_percent):.1f}% ‚Üí ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏≤‡∏•‡∏á‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á"
    elif diff_percent > 0:
        return f"üü° ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ EMA {diff_percent:.1f}% ‚Üí ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡πà‡∏≠‡∏ô"
    elif diff_percent < 0:
        return f"üü° ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ EMA {abs(diff_percent):.1f}% ‚Üí ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏≤‡∏•‡∏á‡∏≠‡πà‡∏≠‡∏ô"
    else:
        return "‚ö™ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á EMA ‚Üí ‡∏≠‡∏≤‡∏à‡∏£‡∏≠‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°"

# ========== Streamlit Layout ==========
st.set_page_config(page_title="üìä Stock News Dashboard", layout="wide")

# Custom CSS
st.markdown("""
<style>
.metric-card {
    background-color: #f0f2f6;
    padding: 1rem;
    border-radius: 10px;
    border-left: 4px solid #1f77b4;
}
.positive { color: #28a745; }
.negative { color: #dc3545; }
.neutral { color: #6c757d; }
.quota-info {
    background-color: #e7f3ff;
    padding: 0.5rem;
    border-radius: 5px;
    border-left: 3px solid #007bff;
    margin: 1rem 0;
}
</style>
""", unsafe_allow_html=True)

st.title("üìà Dashboard ‡∏Ç‡πà‡∏≤‡∏ß‡∏´‡∏∏‡πâ‡∏ô + ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡πÅ‡∏ö‡∏ö Realtime")
st.markdown("*‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Yahoo Finance ‡πÅ‡∏•‡∏∞ Multiple News Sources*")

# ‡πÅ‡∏™‡∏î‡∏á API Quota Status
quota_key = f"api_quota_{datetime.datetime.now().strftime('%Y%m%d')}"
current_quota = st.session_state.get(quota_key, 0)
remaining_quota = max(0, 80 - current_quota)

st.markdown(f"""
<div class="quota-info">
üìä <strong>News API Status:</strong> ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ {current_quota}/80 requests ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ | ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_quota} requests
</div>
""", unsafe_allow_html=True)

ticker = st.selectbox("üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏´‡∏£‡∏∑‡∏≠ Watchlist:", ALL_TICKERS, index=0, 
                     format_func=lambda x: f"{'üìä ' if x in PORT_STOCKS else 'üëÅÔ∏è '}{x} - {company_map.get(x, {}).get('name', x)}")

# Control buttons
col_btn1, col_btn2, col_btn3 = st.columns([1, 1, 2])
with col_btn1:
    if st.button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
        st.cache_data.clear()
        st.rerun()

with col_btn2:
    if st.button("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á Cache ‡∏Ç‡πà‡∏≤‡∏ß"):
        # ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ news cache
        keys_to_remove = [k for k in st.session_state.keys() if 'news_cache' in k]
        for key in keys_to_remove:
            del st.session_state[key]
        st.success("‚úÖ ‡∏•‡πâ‡∏≤‡∏á News Cache ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        st.rerun()

with col_btn3:
    st.caption("üí° ‡∏´‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏•‡∏≠‡∏á '‡∏•‡πâ‡∏≤‡∏á Cache ‡∏Ç‡πà‡∏≤‡∏ß' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà")

with st.spinner("üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πà‡∏≤‡∏ß..."):
    stock_data = get_stock_price_and_indicators(ticker)
    raw_news = get_news_for_ticker(ticker)

# ========== Display Section ==========

# Price Section
change_color = "positive" if stock_data['change'] >= 0 else "negative"
change_symbol = "+" if stock_data['change'] >= 0 else ""

st.markdown(f"""
<div class="metric-card">
<h2>üí∞ {ticker} - ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${stock_data['price']}</h2>
<p class="{change_color}">‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: {change_symbol}{stock_data['change']}%</p>
</div>
""", unsafe_allow_html=True)

# Technical Indicators
col1, col2 = st.columns(2)

with col1:
    st.metric("üìä RSI (14 ‡∏ß‡∏±‡∏ô)", f"{stock_data['rsi']:.1f}", help="Relative Strength Index - ‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤")
    st.info(rsi_recommendation(stock_data['rsi']))

with col2:
    st.metric("üìà EMA (20 ‡∏ß‡∏±‡∏ô)", f"${stock_data['ema']:.2f}", help="Exponential Moving Average - ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡πÄ‡∏≠‡πá‡∏Å‡∏ã‡πå‡πÇ‡∏õ‡πÄ‡∏ô‡∏ô‡πÄ‡∏ä‡∏µ‡∏¢‡∏•")
    st.info(ema_recommendation(stock_data['price'], stock_data['ema']))

# News Analysis Section
st.subheader("üì∞ ‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")

if raw_news:
    with st.expander(f"üìÑ ‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(raw_news)} ‡∏Ç‡πà‡∏≤‡∏ß", expanded=True):
        for i, article in enumerate(raw_news[:4], 1):  # ‡πÅ‡∏™‡∏î‡∏á 4 ‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏£‡∏Å
            with st.container():
                col_title, col_date = st.columns([3, 1])
                
                with col_title:
                    st.markdown(f"**{i}. [{article['title']}]({article['url']})**")
                
                with col_date:
                    try:
                        pub_date = datetime.datetime.fromisoformat(article['publishedAt'].replace('Z', '+00:00'))
                        st.caption(f"üìÖ {pub_date.strftime('%d/%m/%Y %H:%M')}")
                    except:
                        st.caption("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
                
                if article.get('description'):
                    st.write(f"üìù {article['description'][:200]}...")
                
                # AI Analysis
                with st.spinner(f"ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà {i}..."):
                    analysis = analyze_sentiment_and_summarize(article)
                    st.markdown(f"**üéØ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:**\n{analysis}")
                
                st.divider()
else:
    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")

# Summary Section
st.subheader("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°")
col_summary1, col_summary2 = st.columns(2)

with col_summary1:
    st.markdown("### üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ")
    rsi_status = "‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
    if stock_data['rsi'] < 30: rsi_status = "‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏£‡∏á"
    elif stock_data['rsi'] > 70: rsi_status = "‡∏Ç‡∏≤‡∏¢‡πÅ‡∏£‡∏á"
    
    ema_status = "‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á" 
    if stock_data['price'] > stock_data['ema']: ema_status = "‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏ö‡∏ß‡∏Å"
    elif stock_data['price'] < stock_data['ema']: ema_status = "‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏•‡∏ö"
    
    st.write(f"- RSI: {rsi_status}")
    st.write(f"- EMA: {ema_status}")

with col_summary2:
    st.markdown("### üìà ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô")
    if stock_data['rsi'] < 30 and stock_data['price'] > stock_data['ema']:
        st.success("‚úÖ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ã‡∏∑‡πâ‡∏≠ - RSI ‡∏ï‡πà‡∏≥‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏ö‡∏ß‡∏Å")
    elif stock_data['rsi'] > 70 and stock_data['price'] < stock_data['ema']:
        st.error("‚ùå ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏≤‡∏¢ - RSI ‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏•‡∏ö")
    else:
        st.info("‚è≥ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô - ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ")

st.markdown("---")
st.caption("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏•‡∏á‡∏ó‡∏∏‡∏ô")
