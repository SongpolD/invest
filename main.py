# main.py

import streamlit as st
import openai
import requests
from typing import List, Literal
from dataclasses import dataclass, field

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API KEY
openai.api_key = st.secrets["OPENAI_API_KEY"]
NEWS_API_KEY = st.secrets["NEWS_API_KEY"]  # ‡πÉ‡∏ä‡πâ NewsAPI (https://newsapi.org)

# ‚úÖ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
Sentiment = Literal["positive", "negative", "neutral"]
Impact = Literal["high", "medium", "low"]
Category = Literal["portfolio", "watchlist"]

@dataclass
class NewsItem:
    title: str
    content: str
    translated: str
    sentiment: Sentiment
    impact: Impact
    url: str
    published_at: str

@dataclass
class Stock:
    ticker: str
    name: str
    category: Category
    news: List[NewsItem] = field(default_factory=list)

# ‚úÖ ‡πÉ‡∏ä‡πâ OpenAI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå + ‡πÅ‡∏õ‡∏•‡πÑ‡∏ó‡∏¢
def analyze_and_translate(content: str) -> tuple[str, Sentiment]:
    if not content.strip():
        return "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•", "neutral"
    
    prompt = f"""
‡∏Ç‡πà‡∏≤‡∏ß: {content}

1. ‡πÅ‡∏õ‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÇ‡∏î‡∏¢‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡πà‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏°‡∏µ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡πÉ‡∏î: positive, negative ‡∏´‡∏£‡∏∑‡∏≠ neutral

‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:
‡πÅ‡∏õ‡∏•‡πÑ‡∏ó‡∏¢: <‡πÅ‡∏õ‡∏•‡∏Ç‡πà‡∏≤‡∏ß>
‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå: <positive/negative/neutral>
    """
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
            timeout=30
        )
        result = response.choices[0].message.content
        translated = result.split("‡πÅ‡∏õ‡∏•‡πÑ‡∏ó‡∏¢:")[1].split("‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå:")[0].strip()
        sentiment = result.split("‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå:")[1].strip().lower()
        return translated, sentiment
    except Exception:
        return "‚ùå ‡πÅ‡∏õ‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "neutral"

# ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å NewsAPI ‡∏û‡∏£‡πâ‡∏≠‡∏° fallback ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ description
def fetch_news(ticker: str) -> List[NewsItem]:
    url = "https://newsapi.org/v2/everything"
    params = {
        "q": ticker,
        "sortBy": "publishedAt",
        "language": "en",
        "apiKey": NEWS_API_KEY,
        "pageSize": 5,  # ‡∏î‡∏∂‡∏á‡πÅ‡∏Ñ‡πà 5 ‡∏Ç‡πà‡∏≤‡∏ß
    }
    response = requests.get(url, params=params)
    articles = response.json().get("articles", [])
    news_items = []
    for article in articles:
        # üîÅ ‡πÉ‡∏ä‡πâ description ‚Üí content ‚Üí title
        content = article.get("description") or article.get("content") or article.get("title") or ""
        if not content.strip():
            continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÜ

        translated, sentiment = analyze_and_translate(content)
        news_items.append(NewsItem(
            title=article["title"],
            content=content,
            translated=translated,
            sentiment=sentiment,
            impact="medium",
            url=article["url"],
            published_at=article["publishedAt"]
        ))
    return news_items

# ‚úÖ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô
stocks: List[Stock] = [
    Stock(ticker="AAPL", name="Apple Inc.", category="portfolio"),
    Stock(ticker="TSLA", name="Tesla Inc.", category="watchlist"),
    Stock(ticker="NVDA", name="NVIDIA Corporation", category="watchlist"),
    Stock(ticker="MSFT", name="Microsoft Corp.", category="portfolio"),
    Stock(ticker="HIMS", name="Hims & Hers Health, Inc.", category="watchlist"),
    Stock(ticker="ABBV", name="AbbVie Inc.", category="watchlist"),
    Stock(ticker="NVO", name="Novo Nordisk A/S", category="watchlist"),
]

# ‚úÖ Streamlit UI
st.set_page_config(page_title="üìà Vibe Stock Dashboard", layout="wide")
st.title("üìà Vibe Stock Tracker (OpenAI Powered)")

category_filter = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà", ["portfolio", "watchlist"])
filtered_stocks = [s for s in stocks if s.category == category_filter]

for stock in filtered_stocks:
    with st.expander(f"{stock.name} ({stock.ticker})"):
        if not stock.news:
            st.write("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß...")
            stock.news = fetch_news(stock.ticker)

        # ‚úÖ ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡∏≤‡∏° sentiment
        good_news = [n for n in stock.news if n.sentiment == "positive"]
        bad_news = [n for n in stock.news if n.sentiment == "negative"]
        neutral_news = [n for n in stock.news if n.sentiment == "neutral"]

        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown("### ‚úÖ ‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å")
            for news in good_news:
                st.markdown(f"**üü¢ {news.title}**")
                st.caption(news.published_at)
                st.write(news.translated)
                st.markdown(f"[üîó ‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠]({news.url})")
                st.markdown("---")

        with col2:
            st.markdown("### ‚ö†Ô∏è ‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á")
            for news in neutral_news:
                st.markdown(f"**üü° {news.title}**")
                st.caption(news.published_at)
                st.write(news.translated)
                st.markdown(f"[üîó ‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠]({news.url})")
                st.markdown("---")

        with col3:
            st.markdown("### ‚ùå ‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡∏ö")
            for news in bad_news:
                st.markdown(f"**üî¥ {news.title}**")
                st.caption(news.published_at)
                st.write(news.translated)
                st.markdown(f"[üîó ‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠]({news.url})")
                st.markdown("---")
